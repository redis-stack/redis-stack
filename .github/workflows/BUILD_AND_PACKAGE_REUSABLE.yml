name: Build and Publish

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      arch:
        required: false
        type: string
        default: x86_64
      osnick:
        required: true
        type: string
      target:
        required: true
        type: string
      platform:
        required: true
        type: string
      osname:
        required: true
        type: string
      build_deps:
        required: true
        type: string
      packaging_deps:
        required: true
        type: string
      redisversion:
        required: false
        type: string
      packagedredisversion:
        required: false
        type: string
      pythonversion:
        required: false
        type: string
        default: "3.10"
      rubyversion:
        required: false
        type: string
        default: 2.7.2
      fpmversion:
        required: false
        type: string
        default: 1.14.2
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      GPG_KEY:
        required: true
      GPG_PASSWORD:
        required: true

jobs:

   build-redis:
    name: Build ${{inputs.platform}} (${{inputs.arch}})

    env:
      redisversion: ${{inputs.redisversion}}
      packagedredisversion: ${{inputs.packagedredisversion}}
      pythonversion: "${{inputs.pythonversion}}"
      fpmversion: ${{inputs.fpmversion}}
      rubyversion: ${{inputs.rubyversion}}
    runs-on: ubuntu-latest
    container: ${{inputs.image_name}}
    steps:

    - name: vars for here
      run: |
        env
        set

    - name: install dependencies
      run: ${{inputs.build_deps}}

    - name: determine if in fork
      id: iamafork
      run: |
        amfork=`cat /github/workflow/event.json | jq '.pull_request.head.repo.fork'`
        echo "am I fork: ${amfork}"
        echo "::set-output name=IAMAFORK::$amfork"

    - name: check if already built
      id: redis-already-built
      continue-on-error: true
      run: |
        wget https://redismodules.s3.amazonaws.com/redis-stack/dependencies/redis-${{inputs.packagedredisversion}}-${{inputs.osname}}-$${{inputs.osnick}}-${{inputs.arch}}.tgz
    - uses: actions/checkout@v2
      if: steps.redis-already-built.outcome != 'success'
      with:
        repository: redis/redis
        path: redis
        ref: ${{env.redisversion}}
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          /var/cache/apt
          /var/cache/yum
        key: cache-${{hashFiles('.github/workflows/*.yml')}}-${{inputs.platform}}-${{inputs.arch}}-build
    - name: make
      if: steps.redis-already-built.outcome != 'success'
      run: make -C redis/src all BUILD_TLS=yes
    - name: package redis for s3
      if: steps.redis-already-built.outcome != 'success'
      run: |
        mkdir redis-${{env.packagedredisversion}}-${{inputs.osname}}-${{inputs.osnick}}-${{inputs.arch}}
        cp redis/src/redis-server \
           redis/src/redis-sentinel \
           redis/src/redis-check-aof \
           redis/src/redis-check-rdb \
           redis/src/redis-benchmark \
           redis/src/redis-cli \
           redis-${{env.packagedredisversion}}-${{inputs.osname}}-${{inputs.osnick}}-${{inputs.arch}}
        tar -czvf redis-${{env.packagedredisversion}}-${{inputs.osname}}-${{inputs.osnick}}-${{inputs.arch}}.tgz \
           redis-${{env.packagedredisversion}}-${{inputs.osname}}-${{inputs.osnick}}-${{inputs.arch}}
    - name: install s3cmd
      if: steps.redis-already-built.outcome != 'success'
      run: |
        pip3 install s3cmd
    - name: persist redis to s3
      if: steps.redis-already-built.outcome != 'success' && steps.iamafork.outputs.IAMAFORK == 'false'
      run: |
        s3cmd --access_key=${{secrets.AWS_ACCESS_KEY_ID}} --secret_key=${{secrets.AWS_SECRET_ACCESS_KEY}} --region=us-east-1 put -P redis-${{env.packagedredisversion}}-${{inputs.osname}}-${{inputs.osnick}}-${{inputs.arch}}.tgz \
          s3://redismodules/redis-stack/dependencies/redis-${{env.packagedredisversion}}-${{inputs.osname}}-${{inputs.osnick}}-${{inputs.arch}}.tgz

    - name: perist redis
      if: steps.redis-already-built.outcome != 'success'
      uses: actions/upload-artifact@v2
      with:
        name: redis-${{env.packagedredisversion}}-${{inputs.platform}}
        path: |
          redis/src/redis-server
          redis/src/redis-sentinel
          redis/src/redis-check-aof
          redis/src/redis-check-rdb
          redis/src/redis-benchmark
          redis/src/redis-cli

   package:
    name: Package ${{inputs.platform}} (${{inputs.arch}}) ${{matrix.package}}
    env:
      redisversion: ${{inputs.redisversion}}
      pythonversion: "${{inputs.pythonversion}}"
      fpmversion: ${{inputs.fpmversion}}
      rubyversion: ${{inputs.rubyversion}}
      platform: ${{inputs.platform}}
      osname: ${{inputs.osname}}
      osnick: ${{inputs.osnick}}
      arch: ${{inputs.arch}}
      target: ${{inputs.target}}

    runs-on: ubuntu-latest
    needs: [build-redis]
    strategy:
      matrix:
        package: ['redis-stack-server']  # add the matrix back if multiple packages are a thing againt

    steps:

      - name: determine if in fork
        id: iamafork
        run: |
          amfork=`cat /home/runner/work/_temp/_github_workflow/event.json | jq '.pull_request.head.repo.fork'`
          echo "am I fork: ${amfork}"
          echo "::set-output name=IAMAFORK::$amfork"

      - uses: actions/checkout@v2
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            /var/cache/apt
            /var/cache/yum
            ~/.cache/pip
            ~/.cache/pypoetry
            ~/.local/share/gem
          key: pypoetry-${{hashFiles('pyproject.toml', '.github/workflows/*.yml')}}-${{inputs.platform}}-${{inputs.arch}}-package

      - uses: ruby/setup-ruby@v1
      - name: install python
        uses: actions/setup-python@v3
        with:
          python-version: "${{env.pythonversion}}"
      - name: install poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-in-project: true
          virtualenvs-create: true
          installer-parallel: true

      - name: install packaging and testing tools
        run: |
          sudo ${{inputs.packaging_deps}}
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install vagrant virtualbox
          poetry install

      - run: gem install fpm -v ${{env.fpmversion}}
      # - uses: actions/download-artifact@v2
      #   with:
      #     name: redis-${{env.redisversion}}-${{env.platform}}
      #     path: deps/redis-${{env.redisversion}}-${{env.platform}}
      - name: display structure
        run: ls -R
      - name: build ${{matrix.package}}
        run: |
          source .venv/bin/activate
          invoke package -o ${{env.osname}} -s ${{env.osnick}} -d ${{env.platform}} -a ${{env.arch}} -t ${{env.target}} -p ${{ matrix.package }}

      - name: build downloadable tarball
        run: |
          source .venv/bin/activate
          invoke package -o ${{env.osname}} -s ${{env.osnick}} -d ${{env.platform}} -a ${{env.arch}} -t tar -p ${{ matrix.package }}

      - name: install gpg key
        if: steps.iamafork.outputs.IAMAFORK == 'false'
        run: |
          cat <(echo -e "${{ secrets.GPG_KEY }}") | gpg --batch --import

      - name: get gpg id from key
        if: steps.iamafork.outputs.IAMAFORK == 'false'
        id: get_gpg_id
        run: |
          gpg_id=`gpg --list-keys|sed -n 4p|awk '{print $1}'`
          echo "::set-output name=GPG_ID::$gpg_id"

      - name: get gpg email address
        if: steps.iamafork.outputs.IAMAFORK == 'false'
        id: get_gpg_email
        run: |
          gpg_email=`gpg -k|grep uid|cut -d '<' -f 2-2|cut -d '>' -f 1-1`
          echo "::set-output name=GPG_EMAIL::$gpg_email"

      - name: get gpg_keygrip
        if: steps.iamafork.outputs.IAMAFORK == 'false'
        id: get_gpg_keygrip
        run: |
          keygrip=`gpg -k --with-keygrip |sed -n 5p|cut -d '=' -f 2-2`
          echo "::set-output name=GPG_KEYGRIP::$keygrip"

      - name: gpg sign package
        if: steps.iamafork.outputs.IAMAFORK == 'false'
        run: |
          if [ -f /usr/bin/dpkg-sig ]; then
            echo '${{secrets.GPG_PASSWORD}}' > .passfile
            dpkg-sig -g '--pinentry-mode loopback --passphrase-file .passfile --batch' -s redis -k ${{steps.get_gpg_id.outputs.GPG_ID}} *.deb
            rm -f .passfile
          elif [ -f /usr/bin/rpm ]; then
            gpg --export -a '${{ steps.get_gpg_email.outputs.GPG_EMAIL }}' > key
            rpm --import key
            echo allow-preset-passphrase > ~/.gnupg/gpg-agent.conf
            gpg-connect-agent reloadagent /bye
            /usr/lib/gnupg/gpg-preset-passphrase -P '${{ secrets.GPG_PASSWORD }}' -c --preset ${{ steps.get_gpg_keygrip.outputs.GPG_KEYGRIP }}
            rpmsign --addsign --key-id ${{ steps.get_gpg_id.outputs.GPG_ID}} *.rpm
            rm key
          fi

      - name: run tests in dockers
        run: |
          source .venv/bin/activate
          mkdir redis-stack
          cp *.tar.gz redis-stack/${{ matrix.package }}.tar.gz
          cp *.${{ env.target }} redis-stack/${{ matrix.package }}.${{ env.target }}
          # pytest -m "${{env.platform}} and not physical and not arm"
          invoke test -m ${{env.platform}} -n physical -n arm

      - name: perist ${{env.target}} package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.package }}-${{env.platform}}-${{env.arch}}.${{env.target}}
          path: |
            ${{ matrix.package }}*.${{env.target}}
      - name: perist tarball
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.package }}-${{env.platform}}-${{env.arch}}.tar.gz
          path: |
            ${{ matrix.package }}*.tar.gz

      - name: gather packages for s3 upload
        continue-on-error: true
        run: |
          mkdir -p s3uploads
          cp *.${{env.target}} *.tar.gz s3uploads
          cd s3uploads
          for i in `ls`; do
            sha256sum $i |awk '{print $1}' > $i.sha256
          done
      - uses: s3-actions/s3cmd@v1.1
        if: steps.iamafork.outputs.IAMAFORK == 'false'
        with:
          provider: aws
          region: us-east-1
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: upload snapshots
        if: startsWith(github.ref, 'refs/tags/') != true && steps.iamafork.outputs.IAMAFORK == 'false'
        run: |
          s3cmd put -P s3uploads/* s3://redismodules/redis-stack/snapshots/

#   physical_tests:
#    name: Test in VT-x
#    runs-on: macos-10.15
#    needs: [package]
#    env:
#      pythonversion: ${{inputs.pythonversion}}
#      platform: ${{inputs.platform}}
#      osname: ${{inputs.osname}}
#      osnick: ${{inputs.osnick}}
#      arch: ${{inputs.arch}}
#      target: ${{inputs.target}}
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Cache
#        uses: actions/cache@v2
#        with:
#          path: ~/.vagrant.d/boxes
#          key: vagrant-${{inputs.platform}}-${{inputs.osname}}-${{inputs.osnick}}
#          restore-keys: vagrant-${{inputs.platform}}-${{inputs.osname}}-${{inputs.osnick}}
#      - run: vagrant --version
#      - name: install python
#        uses: actions/setup-python@v3
#        with:
#          python-version: ${{env.pythonversion}}
#      - name: install poetry
#        uses: snok/install-poetry@v1
#        with:
#          version: latest
#          virtualenvs-in-project: true
#          virtualenvs-create: true
#          installer-parallel: true
#      - uses: s3-actions/s3cmd@v1.1
#        with:
#          provider: aws
#          region: us-east-1
#          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#      - name: install dependencies
#        run: |
#          python -m venv .venv
#          source .venv/bin/activate
#          poetry install
#      - name: get package version
#        id: get_version
#        run: |
#          source .venv/bin/activate
#          realversion=`invoke version`
#          echo "::set-output name=VERSION::$realversion"
#      - uses: s3-actions/s3cmd@v1.1
#        with:
#          provider: aws
#          region: us-east-1
#          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#      - name: fetch package
#        run: |
#          mkdir redis-stack
#          cd redis-stack
#          s3cmd get s3://redismodules/redis-stack/snapshots/redis-stack-server-${{steps.get_version.outputs.VERSION}}.${{inputs.platform}}.${{inputs.arch}}.${{inputs.target}} redis-stack-server.${{inputs.target}}
#      - name: run tests in vagrants
#        run: |
#          source .venv/bin/activate
#          invoke test -m ${{env.platform}} -m physical -n arm
