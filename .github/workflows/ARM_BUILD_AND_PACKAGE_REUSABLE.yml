name: Build and Publish

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      arch:
        required: false
        type: string
        default: x86_64
      osnick:
        required: true
        type: string
      target:
        required: true
        type: string
      platform:
        required: true
        type: string
      osname:
        required: true
        type: string
      build_deps:
        required: true
        type: string

      pythonversion:
        required: false
        type: string
        default: "3.10"
      rubyversion:
        required: false
        type: string
        default: 2.7.2
      fpmversion:
        required: false
        type: string
        default: 1.15.1
      moduleoverride:
        required: false
        type: string
      redislinkflags:
        required: false
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      GPG_KEY:
        required: true
      GPG_PASSWORD:
        required: true

jobs:

  build-redis:
    name: Build ${{inputs.platform}} (${{inputs.arch}})

    env:
      pythonversion: ${{inputs.pythonversion}}
      fpmversion: ${{inputs.fpmversion}}
      rubyversion: ${{inputs.rubyversion}}
    runs-on: ubuntu-latest
    steps:
    - name: determine if in fork
      id: iamafork
      run: |
        amfork=`jq '.pull_request.head.repo.fork' $GITHUB_EVENT_PATH`
        echo "am I fork: ${amfork}"
        echo "IAMAFORK=$amfork" >> $GITHUB_OUTPUT

    - name: check out redis-stack
      uses: actions/checkout@v3
      with:
        path: redis-stack

    - name: get versions from config file
      id: get_config_versions
      run: |
        echo PACKAGEDREDISVERSION=`grep -w "packagedredisversion" redis-stack/config.yml | cut -d ":" -f 2-2|tr -d ' '` >> $GITHUB_OUTPUT
        echo REDISVERSION=`grep -w "redis:" redis-stack/config.yml | cut -d ":" -f 2-2|tr -d ' '` >> $GITHUB_OUTPUT

    - name: check if already built
      id: redis-already-built
      continue-on-error: true
      run: |
        wget -q https://redismodules.s3.amazonaws.com/redis-stack/dependencies/redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{inputs.osname}}-${{inputs.osnick}}-${{inputs.arch}}.tgz
    - uses: actions/checkout@v3
      if: steps.redis-already-built.outcome != 'success'
      with:
        repository: redis/redis
        path: redis
        ref: ${{steps.get_config_versions.outputs.REDISVERSION}}
    - name: Cache dependencies
      uses: actions/cache@v3
      if: steps.redis-already-built.outcome != 'success'
      with:
        path: |
          /var/cache/apt/archives/**.deb
          /var/cache/yum
        key: cache-${{hashFiles('.github/workflows/redis.yml')}}-${{inputs.platform}}-${{inputs.arch}}-build
    - name: make
      if: steps.redis-already-built.outcome != 'success'
      uses: uraimo/run-on-arch-action@v2
      with:
        arch: aarch64
        distro: ${{inputs.osnick}}
        install: ${{inputs.build_deps}}
        run: |
          make -C redis/src all BUILD_TLS=yes MALLOC=libc
    - name: package redis for s3
      if: steps.redis-already-built.outcome != 'success'
      run: |
        mkdir redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{inputs.osname}}-${{inputs.osnick}}-${{inputs.arch}}
        cp redis/src/redis-server \
           redis/src/redis-sentinel \
           redis/src/redis-check-aof \
           redis/src/redis-check-rdb \
           redis/src/redis-benchmark \
           redis/src/redis-cli \
           redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{inputs.osname}}-${{inputs.osnick}}-${{inputs.arch}}
        tar -czvf redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{inputs.osname}}-${{inputs.osnick}}-${{inputs.arch}}.tgz \
           redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{inputs.osname}}-${{inputs.osnick}}-${{inputs.arch}}
    - name: install s3cmd
      if: steps.redis-already-built.outcome != 'success'
      run: |
        pip3 install s3cmd
    - name: persist redis to s3
      if: steps.redis-already-built.outcome != 'success' && steps.iamafork.outputs.IAMAFORK == 'false'
      run: |
        s3cmd --access_key=${{secrets.AWS_ACCESS_KEY_ID}} --secret_key=${{secrets.AWS_SECRET_ACCESS_KEY}} --region=us-east-1 put -P redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{inputs.osname}}-${{inputs.osnick}}-${{inputs.arch}}.tgz \
          s3://redismodules/redis-stack/dependencies/redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{inputs.osname}}-${{inputs.osnick}}-${{inputs.arch}}.tgz

    - name: perist redis
      uses: actions/upload-artifact@v3
      if: steps.redis-already-built.outcome != 'success'
      with:
        name: redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{inputs.platform}}-${{inputs.arch}}
        path: |
          redis/src/redis-server
          redis/src/redis-sentinel
          redis/src/redis-check-aof
          redis/src/redis-check-rdb
          redis/src/redis-benchmark
          redis/src/redis-cli

  package:
    name: Package ${{inputs.platform}} (${{inputs.arch}}) ${{matrix.package}}
    env:
      pythonversion: "${{inputs.pythonversion}}"
      fpmversion: ${{inputs.fpmversion}}
      rubyversion: ${{inputs.rubyversion}}
      platform: ${{inputs.platform}}
      osname: ${{inputs.osname}}
      osnick: ${{inputs.osnick}}
      arch: ${{inputs.arch}}
      target: ${{inputs.target}}
      moduleoverride: ${{inputs.moduleoverride}}
    runs-on: ubuntu-latest
    needs: [build-redis]
    strategy:
      matrix:
        package: ['redis-stack-server']  # add the matrix back if multiple packages are a thing againt

    steps:
     - name: determine if in fork
       id: iamafork
       run: |
         amfork=`jq '.pull_request.head.repo.fork' $GITHUB_EVENT_PATH`
         echo "am I fork: ${amfork}"
         echo "IAMAFORK=$amfork" >> $GITHUB_OUTPUT

     - uses: actions/checkout@v3
     - name: Cache dependencies
       uses: actions/cache@v3
       with:
         path: |
           /var/cache/apt/archives/**.deb
           /var/cache/yum
           ~/.cache/pip
           ~/.cache/pypoetry
           ~/.local/share/gem
         key: pypoetry-${{hashFiles('pyproject.toml', '.github/workflows/*.yml')}}-${{inputs.platform}}-${{inputs.arch}}-package

     - uses: ruby/setup-ruby@v1
     - name: install python
       uses: actions/setup-python@v4
       with:
         python-version: "${{env.pythonversion}}"
     - name: install poetry
       uses: snok/install-poetry@v1
       with:
         version: latest
         virtualenvs-in-project: true
         virtualenvs-create: true
         installer-parallel: true

     - name: install packaging and testing tools
       run: |
         sudo apt-get update && sudo apt-get install -y unzip curl rpm dpkg-sig gpg gnupg2 tar
         curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
         sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
         sudo apt-get update && sudo apt-get install vagrant virtualbox
         poetry install

     - name: install qemu
       uses: docker/setup-qemu-action@v2

     # https://github.com/docker/buildx/issues/1509
     - name: set up buildx
       uses: docker/setup-buildx-action@v2
       with:
         install: true
         version: v0.9.1

     - run: gem install fpm -v ${{env.fpmversion}}
     - name: display structure
       run: ls -R
     - name: build ${{matrix.package}}
       run: |
         source .venv/bin/activate
         invoke package -e "${{env.moduleoverride}}" -o ${{env.osname}} -s ${{env.osnick}} -d ${{env.platform}} -a ${{env.arch}} -t ${{env.target}} -p ${{ matrix.package }}

     - name: build downloadable tarball
       run: |
         source .venv/bin/activate
         invoke package -e "${{env.moduleoverride}}" -o ${{env.osname}} -s ${{env.osnick}} -d ${{env.platform}} -a ${{env.arch}} -t tar -p ${{ matrix.package }}

     - name: install gpg key
       if: steps.iamafork.outputs.IAMAFORK == 'false'
       run: |
         cat <(echo -e "${{ secrets.GPG_KEY }}") | gpg --batch --import

     - name: get gpg id from key
       if: steps.iamafork.outputs.IAMAFORK == 'false'
       id: get_gpg_id
       run: |
         gpg_id=`gpg --list-keys|sed -n 4p|awk '{print $1}'`
         echo "GPG_ID=$gpg_id" >> $GITHUB_OUTPUT

     - name: get gpg email address
       if: steps.iamafork.outputs.IAMAFORK == 'false'
       id: get_gpg_email
       run: |
         gpg_email=`gpg -k|grep uid|cut -d '<' -f 2-2|cut -d '>' -f 1-1`
         echo "GPG_EMAIL=$gpg_email" >> $GITHUB_OUTPUT

     - name: get gpg_keygrip
       if: steps.iamafork.outputs.IAMAFORK == 'false'
       id: get_gpg_keygrip
       run: |
         keygrip=`gpg -k --with-keygrip |sed -n 5p|cut -d '=' -f 2-2`
         echo "GPG_KEYGRIP=$keygrip" >> $GITHUB_OUTPUT

     - name: gpg sign package
       if: steps.iamafork.outputs.IAMAFORK == 'false'
       run: |
         if [ -f /usr/bin/dpkg-sig ]; then
           echo '${{secrets.GPG_PASSWORD}}' > .passfile
           dpkg-sig -g '--pinentry-mode loopback --passphrase-file .passfile --batch' -s redis -k ${{steps.get_gpg_id.outputs.GPG_ID}} *.deb
           rm -f .passfile
         elif [ -f /usr/bin/rpm ]; then
           gpg --export -a '${{ steps.get_gpg_email.outputs.GPG_EMAIL }}' > key
           rpm --import key
           echo allow-preset-passphrase > ~/.gnupg/gpg-agent.conf
           gpg-connect-agent reloadagent /bye
           /usr/lib/gnupg/gpg-preset-passphrase -P '${{ secrets.GPG_PASSWORD }}' -c --preset ${{ steps.get_gpg_keygrip.outputs.GPG_KEYGRIP }}
           rpmsign --addsign --key-id ${{ steps.get_gpg_id.outputs.GPG_ID}} *.rpm
           rm key
         fi

     - name: gpg sign tarball
       if: steps.iamafork.outputs.IAMAFORK == 'false'
       run: |
           echo allow-preset-passphrase > ~/.gnupg/gpg-agent.conf
           gpg-connect-agent reloadagent /bye
           /usr/lib/gnupg/gpg-preset-passphrase -P '${{ secrets.GPG_PASSWORD }}' -c --preset ${{ steps.get_gpg_keygrip.outputs.GPG_KEYGRIP }}
           gpg --detach-sign --armor *.tar.gz


    #  - name: run tests
    #    run: |
    #      source .venv/bin/activate
    #      mkdir redis-stack
    #      cp *.tar.gz redis-stack/${{ matrix.package }}.tar.gz
    #      cp *.${{ env.target }} redis-stack/${{ matrix.package }}.${{ env.target }}
    #      invoke test -m ${{env.platform}} -m arm -n physical

     - name: perist ${{env.target}} package
       uses: actions/upload-artifact@v3
       with:
         name: ${{ matrix.package }}-${{env.platform}}-${{env.arch}}.${{env.target}}
         path: |
           ${{ matrix.package }}*.${{env.target}}
     - name: perist tarball
       uses: actions/upload-artifact@v3
       with:
         name: ${{ matrix.package }}-${{env.platform}}-${{env.arch}}.tar.gz
         path: |
           ${{ matrix.package }}*.tar.gz

     - name: gather packages for s3 upload
       if: steps.iamafork.outputs.IAMAFORK == 'false'
       continue-on-error: true
       run: |
         mkdir -p s3uploads
         cp *.${{env.target}} *.tar.gz *.asc s3uploads
         cd s3uploads
         for i in `ls`; do
           sha256sum $i |awk '{print $1}' > $i.sha256
         done
     - uses: s3-actions/s3cmd@v1.2.0
       if: steps.iamafork.outputs.IAMAFORK == 'false'
       with:
         provider: aws
         region: us-east-1
         access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
         secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
     - name: upload snapshots
       if: startsWith(github.ref, 'refs/tags/') != true && steps.iamafork.outputs.IAMAFORK == 'false'
       run: |
         s3cmd put -P s3uploads/* s3://redismodules/redis-stack/snapshots/
