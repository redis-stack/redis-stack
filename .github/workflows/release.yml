name: Publish release

on:

  workflow_dispatch:

  release:
    types: [published]

env:
  pythonversion: "3.10"
  rubyversion: 2.7.2

  # Path to the S3 bucket containing our pre-build packages
  s3root: s3://redismodules/redis-stack

  # Distination bucket for releases
  s3publicreponame: s3://packages.redis.io/redis-stack

jobs:

  promote_releases:
    name: Promote Releases
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: install python
        uses: actions/setup-python@v4
        with:
          python-version: "${{env.pythonversion}}"
      - name: install poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-in-project: true
          virtualenvs-create: true
          installer-parallel: true

      - name: get package version
        id: get_version
        run: |
          poetry install
          source .venv/bin/activate
          realversion=`invoke version -p redis-stack-server -d true`
          echo "VERSION=$realversion" >>$GITHUB_OUTPUT

      - uses: s3-actions/s3cmd@v1.2.0
        with:
          provider: aws
          region: us-east-1
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: get files from s3
        run: |
          mkdir s3uploads/
          s3cmd get ${{env.s3root}}/snapshots/*${{ steps.get_version.outputs.VERSION }}* s3uploads/
      - name: publish all files to s3  # maintain a copy with redis-stack itself so that rpms (etc) can be signed
        run: |
          s3cmd put -P s3uploads/* ${{ env.s3root}}/

      # copy to the distribution bucket
      - uses: s3-actions/s3cmd@v1.2.0
        with:
          provider: aws
          region: us-east-2
          access_key: ${{ secrets.PUBLICREPO_AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.PUBLICREPO_AWS_SECRET_ACCESS_KEY }}
      - name: publish all files to s3
        run: |
          s3cmd put -P s3uploads/* ${{ env.s3publicreponame }}/

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # to solve the issues with cross-org pushes (as returned by the docker API)
      - name: publish redis-stack docker
        run: |
          docker pull redisfab/redis-stack:${{steps.get_version.outputs.VERSION}}-x86_64
          docker tag redisfab/redis-stack:${{steps.get_version.outputs.VERSION}}-x86_64 \
            redis/redis-stack:${{steps.get_version.outputs.VERSION}}-x86_64
          docker push redis/redis-stack:${{steps.get_version.outputs.VERSION}}-x86_64

          docker pull redisfab/redis-stack:${{steps.get_version.outputs.VERSION}}-arm64
          docker tag redisfab/redis-stack:${{steps.get_version.outputs.VERSION}}-arm64 \
            redis/redis-stack:${{steps.get_version.outputs.VERSION}}-arm64
          docker push redis/redis-stack:${{steps.get_version.outputs.VERSION}}-arm64

          docker manifest create redis/redis-stack:${{steps.get_version.outputs.VERSION}} \
              redis/redis-stack:${{steps.get_version.outputs.VERSION}}-x86_64 \
              redis/redis-stack:${{steps.get_version.outputs.VERSION}}-arm64
          docker manifest push redis/redis-stack:${{steps.get_version.outputs.VERSION}}

      - name: publish redis-stack-server docker
        run: |
          docker pull redisfab/redis-stack-server:${{steps.get_version.outputs.VERSION}}-x86_64
          docker tag redisfab/redis-stack-server:${{steps.get_version.outputs.VERSION}}-x86_64 \
            redis/redis-stack-server:${{steps.get_version.outputs.VERSION}}-x86_64
          docker push redis/redis-stack-server:${{steps.get_version.outputs.VERSION}}-x86_64

          docker pull redisfab/redis-stack-server:${{steps.get_version.outputs.VERSION}}-arm64
          docker tag redisfab/redis-stack-server:${{steps.get_version.outputs.VERSION}}-arm64 \
            redis/redis-stack-server:${{steps.get_version.outputs.VERSION}}-arm64
          docker push redis/redis-stack-server:${{steps.get_version.outputs.VERSION}}-arm64

          docker manifest create redis/redis-stack-server:${{steps.get_version.outputs.VERSION}} \
              redis/redis-stack-server:${{steps.get_version.outputs.VERSION}}-x86_64 \
              redis/redis-stack-server:${{steps.get_version.outputs.VERSION}}-arm64
          docker manifest push redis/redis-stack-server:${{steps.get_version.outputs.VERSION}}

      - name: determine if LATEST for docker
        id: latestcheck
        continue-on-error: true
        run: |
          grep "islatest: yes" config.yml
          if [ $? -eq 0 ]; then
            echo "ISLATEST=YES" >>$GITHUB_OUTPUT
          fi

      - name: publish redis-stack docker as latest
        if: ${{steps.latestcheck.outputs.ISLATEST == 'YES'}}
        run: |
          docker manifest create redis/redis-stack:latest \
              redis/redis-stack:${{steps.get_version.outputs.VERSION}}-x86_64 \
              redis/redis-stack:${{steps.get_version.outputs.VERSION}}-arm64
          docker manifest push redis/redis-stack:latest

      - name: publish redis-stack-server docker as latest
        if: ${{steps.latestcheck.outputs.ISLATEST == 'YES'}}
        run: |
          docker manifest create redis/redis-stack-server:latest \
              redis/redis-stack-server:${{steps.get_version.outputs.VERSION}}-x86_64 \
              redis/redis-stack-server:${{steps.get_version.outputs.VERSION}}-arm64
          docker manifest push redis/redis-stack-server:latest
