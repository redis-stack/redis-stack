name: MacOS Intel

on:
  workflow_call:

  workflow_dispatch:


concurrency:
  group: macos-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
# osx is the only one of these that is really
 build-package-osx:

   name: Mac (x86_64) Build
   env:
     arch: x86_64
     osnick: catalina
     target: zip
     platform: catalina
     osname: macos
     pythonversion: "3.10"
     fpmversion: 1.15.1
     rubyversion: 2.7.2

   runs-on: macos-latest

   steps:
   - name: determine if in fork
     id: iamafork
     run: |
       amfork=`jq '.pull_request.head.repo.fork' $GITHUB_EVENT_PATH`
       echo "am I fork: ${amfork}"
       echo "IAMAFORK=$amfork" >> $GITHUB_OUTPUT

   - name: checkout sources
     uses: actions/checkout@v3
     with:
       path: redis-stack

   - name: get versions from config file
     id: get_config_versions
     run: |
       echo PACKAGEDREDISVERSION=`grep -w "packagedredisversion" redis-stack/config.yml | cut -d ":" -f 2-2|tr -d ' '` >> $GITHUB_OUTPUT
       echo REDISVERSION=`grep -w "redis:" redis-stack/config.yml | cut -d ":" -f 2-2|tr -d ' '` >> $GITHUB_OUTPUT

   - name: check if already built
     id: redis-already-built
     continue-on-error: true
     run: |
       wget -q https://redismodules.s3.amazonaws.com/redis-stack/dependencies/redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}.tgz

   - uses: ruby/setup-ruby@v1
     with:
       ruby-version: ${{env.rubyversion}}
   - name: install python
     uses: actions/setup-python@v4
     with:
       python-version: "${{ env.pythonversion }}"
   - name: install poetry
     uses: snok/install-poetry@v1
     with:
       version: latest
       virtualenvs-in-project: true
       virtualenvs-create: true
       installer-parallel: true

   - name: clone redis
     if: steps.redis-already-built.outcome != 'success'
     uses: actions/checkout@v3
     with:
       repository: redis/redis
       path: redis
       ref: ${{steps.get_config_versions.outputs.REDISVERSION}}

   - name: install dependencies
     run: |
       brew install openssl@3
       gem install fpm -v ${{env.fpmversion}}
       cd redis-stack
       poetry install
   - name: build redis from source
     if: steps.redis-already-built.outcome != 'success'
     run: |
       cd redis
       make all BUILD_TLS=yes FINAL_LIBS="-lm -ldl ../deps/hiredis/libhiredis_ssl.a /usr/local/opt/openssl/lib/libssl.a /usr/local/opt/openssl/lib/libcrypto.a"

   - name: package redis for s3
     if: steps.redis-already-built.outcome != 'success'
     run: |
       mkdir redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}
       cp redis/src/redis-server \
           redis/src/redis-sentinel \
           redis/src/redis-check-aof \
           redis/src/redis-check-rdb \
           redis/src/redis-benchmark \
           redis/src/redis-cli \
           redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}
       tar -czvf redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}.tgz \
           redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}

   - uses: s3-actions/s3cmd@v1.5.0
     with:
       provider: aws
       region: us-east-1
       access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
       secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
   - name: persist redis to s3
     if: steps.redis-already-built.outcome != 'success' && steps.iamafork.outputs.IAMAFORK == 'false'
     run: |
       s3cmd put -P redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}.tgz \
       s3://redismodules/redis-stack/dependencies/redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}.tgz

   - name: perist redis
     if: steps.redis-already-built.outcome != 'success'
     uses: actions/upload-artifact@v3
     with:
       name: redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-osx
       path: |
         redis/src/redis-server
         redis/src/redis-sentinel
         redis/src/redis-check-aof
         redis/src/redis-check-rdb
         redis/src/redis-benchmark
         redis/src/redis-cli

   - name: collect dependencies prior to zipping
     run: |
       cd redis-stack
       source .venv/bin/activate
       invoke package -o ${{env.osname}} -s ${{env.osnick}} -d ${{env.platform}} -a ${{env.arch}} -t zip -p redis-stack-server -k package

   - name: codesign all binaries
     if: steps.iamafork.outputs.IAMAFORK == 'false'
     run: |
       cd redis-stack
       echo ${{secrets.MACOS_CERTIFICATE}} | base64 --decode > certificate.p12
       security create-keychain -p ${{ secrets.MACOS_KEYCHAIN_PASSWORD }} build.keychain
       security default-keychain -s build.keychain
       security unlock-keychain -p ${{ secrets.MACOS_KEYCHAIN_PASSWORD }} build.keychain
       security import certificate.p12 -k build.keychain -P ${{ secrets.MACOS_CERTIFICATE_PASSWORD }} -T /usr/bin/codesign
       security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k ${{ secrets.MACOS_KEYCHAIN_PASSWORD }} build.keychain
       CODESIGN_IDENTITY=`security find-identity -v|head -n 1|awk '{print $2}'`
       for i in `ls build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/bin`; do
         /usr/bin/codesign --options=runtime --timestamp -v --sign ${CODESIGN_IDENTITY} --entitlements etc/entitlements -f build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/bin/$i
       done
       for i in `ls build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/lib`; do
         /usr/bin/codesign --options=runtime --timestamp -v --sign ${CODESIGN_IDENTITY} --entitlements etc/entitlements -f build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/lib/$i
       done

   - name: build the redis-stack-server zipfile (for homebrew)
     run: |
       cd redis-stack
       source .venv/bin/activate
       invoke package -o ${{env.osname}} -s ${{env.osnick}} -d ${{env.platform}} -a ${{env.arch}} -r ../redis/src -t zip -p redis-stack-server -k fetch

   - name: perist the zipfile
     uses: actions/upload-artifact@v3
     with:
       name: redis-stack-${{env.platform}}-${{env.arch}}.${{env.target}}
       path: |
         redis-stack/redis-stack-*.zip

   - name: create the zip for notarization
     run: |
       cd redis-stack/build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack
       zip -r notarized-${{env.platform}}-${{env.arch}}.zip bin lib

   - name: notarize the custom zip
     if: steps.iamafork.outputs.IAMAFORK == 'false'
     run: |
       cd redis-stack/build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack
       sh ../../../../notarize.sh notarized-${{env.platform}}-${{env.arch}}.zip com.redis.redis-stack-server ${{ secrets.MAC_NOTARIZE_USERNAME }} ${{ secrets.MAC_NOTARIZE_PASSWORD }}

 test-osx-intel:
   name: Mac (x86_64) Tests
   needs: ['build-package-osx']
   runs-on: macos-latest
   env:
     arch: x86_64
     osnick: catalina
     target: zip
     platform: catalina
     osname: macos
     pythonversion: "3.10"

   steps:
   - name: determine if in fork
     id: iamafork
     run: |
       amfork=`jq '.pull_request.head.repo.fork' $GITHUB_EVENT_PATH`
       echo "am I fork: ${amfork}"
       echo "IAMAFORK=$amfork" >> $GITHUB_OUTPUT

   - name: install python
     uses: actions/setup-python@v4
     with:
       python-version: "${{ env.pythonversion }}"
   - name: install poetry
     uses: snok/install-poetry@v1
     with:
       version: latest
       virtualenvs-in-project: true
       virtualenvs-create: true
       installer-parallel: true
   - name: checkout sources
     uses: actions/checkout@v3
   - name: install dependencies
     run: |
       brew install libomp openssl coreutils
       poetry install
   - name: gather artifacts
     uses: actions/download-artifact@v3
     with:
       path: redis-stack
       name: redis-stack-${{env.platform}}-${{env.arch}}.${{env.target}}
   - name: unzip the zipfile
     run: |
       ls -R
       mkdir -p redis-stack
       unzip redis-stack/redis-stack*.${{env.target}} -d redis-stack/redis-stack-server

   - name: run osx tests
     run: |
       .venv/bin/pytest -m macos --junit-xml=results.xml

   - name: get package version
     id: get_version
     run: |
       poetry install
       source .venv/bin/activate
       realversion=`invoke version`
       echo "VERSION=$realversion" >> $GITHUB_OUTPUT

   - uses: s3-actions/s3cmd@v1.5.0
     if: steps.iamafork.outputs.IAMAFORK == 'false'
     with:
       provider: aws
       region: us-east-1
       access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
       secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

   - name: persist redis to s3
     if: steps.iamafork.outputs.IAMAFORK == 'false'
     run: |
      mkdir s3dist
      cp redis-stack/redis-stack*.${{env.target}} s3dist
      for i in `ls s3dist`; do
        sha256sum s3dist/$i | awk '{print $1}' > s3dist/$i.sha256
      done
      s3cmd put -P s3dist/* s3://redismodules/redis-stack/snapshots/