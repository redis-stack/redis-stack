name: MacOS M1

on:

  workflow_call:

  workflow_dispatch:

jobs:

 build-package-osx-m1:
   name: Mac (M1) Package
   env:
     arch: arm64
     osnick: monterey
     target: zip
     platform: monterey
     osname: macos
     pythonversion: "3.10"
     fpmversion: 1.15.1
     rubyversion: 2.7.2
   runs-on: macos-latest
   steps:
   - name: checkout sources
     uses: actions/checkout@v3
   - uses: ruby/setup-ruby@v1
     with:
       ruby-version: ${{env.rubyversion}}
   - name: install python
     uses: actions/setup-python@v4
     with:
       python-version: "${{ env.pythonversion }}"
   - name: install dependencies
     run: |
       brew install coreutils openssl@3 libomp
   - name: install poetry
     uses: snok/install-poetry@v1
     with:
       version: latest
       virtualenvs-in-project: true
       virtualenvs-create: true
       installer-parallel: true
   - name: Cache dependencies
     uses: actions/cache@v3
     with:
       path: |
         /var/cache/apt/archives/**.deb
         ~/.cache/pip
         ~/.cache/pypoetry
         ~/.local/share/gem
       key: pypoetry-${{hashFiles('**/pyproject.toml')}}-${{env.platform}}-${{env.arch}}-package
   - name: install packaging tools
     run: |
       gem install fpm -v ${{env.fpmversion}}
       poetry install

   - name: determine if in fork
     id: iamafork
     run: |
       amfork=`jq '.pull_request.head.repo.fork' $GITHUB_EVENT_PATH`
       echo "am I fork: ${amfork}"
       echo "IAMAFORK=$amfork" >> $GITHUB_OUTPUT

   - name: write the ssh key to a file
     if: steps.iamafork.outputs.IAMAFORK == 'false'
     run: |
       echo "${{secrets.OPERETO_KEY}}" > ssh.key
       chmod 0400 ssh.key

   - name: get versions from config file
     id: get_config_versions
     run: |
       echo PACKAGEDREDISVERSION=`grep -w "packagedredisversion" config.yml | cut -d ":" -f 2-2|tr -d ' '` >> $GITHUB_OUTPUT
       echo REDISVERSION=`grep -w "redis:" config.yml | cut -d ":" -f 2-2|tr -d ' '` >> $GITHUB_OUTPUT

   - name: check if already built
     id: redis-already-built
     continue-on-error: true
     run: |
       wget -q https://redismodules.s3.amazonaws.com/redis-stack/dependencies/redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}.tgz

   - name: build redis from source
     if: steps.redis-already-built.outcome != 'success' && steps.iamafork.outputs.IAMAFORK == 'false'
     run: |
       source .venv/bin/activate
       invoke build-m1-over-ssh \
        -i ${{ secrets.M1_TEST_IP }} \
        -u ${{ secrets.M1_TEST_SSH_USER }} \
        -s ssh.key \
        -v ${{ steps.get_config_versions.outputs.REDISVERSION }} \
        -p ${{ steps.get_config_versions.outputs.PACKAGEDREDISVERSION }}

   - name: package redis for s3
     if: steps.redis-already-built.outcome != 'success'
     run: |
       tar -czvf redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}.tgz \
           redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}
   - uses: s3-actions/s3cmd@v1.2.0
     with:
       provider: aws
       region: us-east-1
       access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
       secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

   - name: persist redis to s3
     if: steps.redis-already-built.outcome != 'success' && steps.iamafork.outputs.IAMAFORK == 'false'
     run: |
       s3cmd put -P redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}.tgz \
       s3://redismodules/redis-stack/dependencies/redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}.tgz

   - name: perist redis
     if: steps.redis-already-built.outcome != 'success'
     uses: actions/upload-artifact@v3
     with:
       name: redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}-${{env.arch}}-osx
       path: |
         redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}*/redis-server
         redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}*/redis-sentinel
         redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}*/redis-check-aof
         redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}*/redis-check-rdb
         redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}*/redis-benchmark
         redis-${{steps.get_config_versions.outputs.PACKAGEDREDISVERSION}}*/redis-cli

   - name: collect dependencies prior to packaging
     run: |
       source .venv/bin/activate
       invoke package -o ${{env.osname}} -s ${{env.osnick}} -d ${{env.platform}} -a ${{env.arch}} -t ${{env.target}} -p redis-stack-server -k package

   - name: codesign all binaries
     if: steps.iamafork.outputs.IAMAFORK == 'false'
     run: |
       echo ${{secrets.MACOS_CERTIFICATE}} | base64 --decode > certificate.p12
       security create-keychain -p ${{ secrets.MACOS_KEYCHAIN_PASSWORD }} build.keychain
       security default-keychain -s build.keychain
       security unlock-keychain -p ${{ secrets.MACOS_KEYCHAIN_PASSWORD }} build.keychain
       security import certificate.p12 -k build.keychain -P ${{ secrets.MACOS_CERTIFICATE_PASSWORD }} -T /usr/bin/codesign
       security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k ${{ secrets.MACOS_KEYCHAIN_PASSWORD }} build.keychain
       CODESIGN_IDENTITY=`security find-identity -v|head -n 1|awk '{print $2}'`
       for i in `ls build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/bin`; do
         /usr/bin/codesign --options=runtime --timestamp -v --sign ${CODESIGN_IDENTITY} --entitlements etc/entitlements -f build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/bin/$i
       done
       for i in `ls build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/lib`; do
         /usr/bin/codesign --options=runtime --timestamp -v --sign ${CODESIGN_IDENTITY} --entitlements etc/entitlements -f build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/lib/$i
       done

   - name: build redis-stack-server zipfile
     run: |
       source .venv/bin/activate
       invoke package -o ${{env.osname}} -s ${{env.osnick}} -d ${{env.platform}} -a ${{env.arch}} -t ${{env.target}} -p redis-stack-server -k fetch
       for i in `ls *.zip`; do
         sha256sum $i |awk '{print $1}' > $i.sha256
       done

   - name: persist the zipfile
     uses: actions/upload-artifact@v3
     with:
       name: redis-stack-server-${{env.platform}}-${{env.arch}}.${{env.target}}
       path: |
         *.zip

   - name: create the zip for notarization
     run: |
       cd build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack
       zip -r notarized-${{env.platform}}-${{env.arch}}.zip bin lib

   - name: persist the codesigned artifacts
     uses: actions/upload-artifact@v3
     with:
       name: codesigned-${{env.platform}}-${{env.arch}}
       path: |
         build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/*.zip

   - name: notarize the custom zip
     if: steps.iamafork.outputs.IAMAFORK == 'false'
     run: |
       cd build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack
       sh ../../../../notarize.sh notarized-${{env.platform}}-${{env.arch}}.zip com.redis.redis-stack-server ${{ secrets.MAC_NOTARIZE_USERNAME }} ${{ secrets.MAC_NOTARIZE_PASSWORD }}

   - uses: s3-actions/s3cmd@v1.2.0
     if: steps.iamafork.outputs.IAMAFORK == 'false'
     with:
       provider: aws
       region: us-east-1
       access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
       secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
   - name: upload snapshots
     if: steps.iamafork.outputs.IAMAFORK == 'false'
     run: |
       s3cmd put -P *.${{env.target}} s3://redismodules/redis-stack/snapshots/
       s3cmd put -P *.sha256 s3://redismodules/redis-stack/snapshots/

 test-osx-m1:
   name: Mac (M1) tests
   needs: [build-package-osx-m1]
   env:
     arch: arm64
     osnick: monterey
     target: zip
     platform: monterey
     osname: macos
     pythonversion: "3.10"
   runs-on: ubuntu-latest
   steps:
     - name: determine if in fork
       id: iamafork
       run: |
         amfork=`jq '.pull_request.head.repo.fork' $GITHUB_EVENT_PATH`
         echo "am I fork: ${amfork}"
         echo "IAMAFORK=$amfork" >> $GITHUB_OUTPUT

     - name: checkout sources
       uses: actions/checkout@v3
     - name: Cache dependencies
       uses: actions/cache@v3
       with:
         path: |
           /var/cache/apt/archives/**.deb
           ~/.cache/pip
           ~/.cache/pypoetry
           ~/.local/share/gem
           poetry.lock
         key: pypoetry-${{hashFiles('**/pyproject.toml')}}-${{env.platform}}-${{env.arch}}-package
     - name: install python
       uses: actions/setup-python@v4
       with:
         python-version: "${{ env.pythonversion }}"
     - name: install poetry
       uses: snok/install-poetry@v1
       with:
         version: latest
         virtualenvs-in-project: true
         virtualenvs-create: true
         installer-parallel: true
     - name: gather artifacts
       uses: actions/download-artifact@v3
       with:
         name: redis-stack-server-${{env.platform}}-${{env.arch}}.${{env.target}}

     - name: write the ssh key to a file
       if: steps.iamafork.outputs.IAMAFORK == 'false'
       run: |
         echo "${{secrets.OPERETO_KEY}}" > ssh.key
         chmod 0400 ssh.key

     - name: get package version
       id: get_version
       run: |
         poetry install
         source .venv/bin/activate
         realversion=`invoke version`
         echo "VERSION=$realversion" >> $GITHUB_OUTPUT

     - name: run the tests
       if: steps.iamafork.outputs.IAMAFORK == 'false'
       run: |
         source .venv/bin/activate
         invoke test-over-ssh -b \
           redis-stack-server-${{steps.get_version.outputs.VERSION}}.${{env.platform}}.${{env.arch}}.${{env.target}} \
           -i ${{secrets.M1_TEST_IP}} \
           -m macos \
           -p redis-stack-server \
           -s ssh.key \
           -u ${{secrets.M1_TEST_SSH_USER}} \
           -v `echo $RANDOM` \
           -g ${{github.head_ref}}