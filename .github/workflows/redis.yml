name: Build Redis

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/worfklows/release.yml'
    branches:
      - master
      - '[0-9].[0-9]'
  pull_request:

jobs:

  # osx is the only one of these that is really
  build-package-osx:

    name: Mac (x86_64) Build
    env:
      arch: x86_64
      osnick: catalina
      target: zip
      platform: catalina
      osname: macos
      redisversion: 7.0.0
      pythonversion: 3.9
      fpmversion: 1.14.1
      rubyversion: 2.7.2

    runs-on: macos-latest
    steps:
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{env.rubyversion}}
    - name: install python
      uses: actions/setup-python@v2
      with:
        python-version: "${{ env.pythonversion }}"
    - name: install poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-in-project: true
        virtualenvs-create: true
        installer-parallel: true

    - name: checkout sources
      uses: actions/checkout@v2
      with:
        path: redis-stack
    - name: clone redis
      uses: actions/checkout@v2
      with:
        repository: redis/redis
        path: redis
        ref: ${{env.redisversion}}

    - name: install dependencies
      run: |
        brew install openssl@3
        gem install fpm -v ${{env.fpmversion}}
        cd redis-stack
        poetry install
    - name: build redis from source
      run: |
        cd redis
        make all BUILD_TLS=yes FINAL_LIBS="-lm -ldl ../deps/hiredis/libhiredis_ssl.a /usr/local/opt/openssl/lib/libssl.a /usr/local/opt/openssl/lib/libcrypto.a"

    - name: package redis for s3
      run: |
        mkdir redis-${{env.redisversion}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}
        cp redis/src/redis-server \
            redis/src/redis-sentinel \
            redis/src/redis-check-aof \
            redis/src/redis-check-rdb \
            redis/src/redis-benchmark \
            redis/src/redis-cli \
            redis-${{env.redisversion}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}
        tar -czvf redis-${{env.redisversion}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}.tgz \
            redis-${{env.redisversion}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}

    - uses: s3-actions/s3cmd@v1.1
      with:
        provider: aws
        region: us-east-1
        access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - name: persist redis to s3
      run: |
        s3cmd put -P redis-${{env.redisversion}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}.tgz \
        s3://redismodules/redis-stack/dependencies/redis-${{env.redisversion}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}.tgz

    - name: perist redis
      uses: actions/upload-artifact@v2
      with:
        name: redis-${{env.redisversion}}-osx
        path: |
          redis/src/redis-server
          redis/src/redis-sentinel
          redis/src/redis-check-aof
          redis/src/redis-check-rdb
          redis/src/redis-benchmark
          redis/src/redis-cli

    - name: collect dependencies prior to zipping
      run: |
        cd redis-stack
        source .venv/bin/activate
        invoke package -o ${{env.osname}} -s ${{env.osnick}} -d ${{env.platform}} -a ${{env.arch}} -r ../redis/src -t zip -p redis-stack-server -k package

    - name: codesign all binaries
      run: |
        cd redis-stack
        echo ${{secrets.MACOS_CERTIFICATE}} | base64 --decode > certificate.p12
        security create-keychain -p ${{ secrets.MACOS_KEYCHAIN_PASSWORD }} build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p ${{ secrets.MACOS_KEYCHAIN_PASSWORD }} build.keychain
        security import certificate.p12 -k build.keychain -P ${{ secrets.MACOS_CERTIFICATE_PASSWORD }} -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k ${{ secrets.MACOS_KEYCHAIN_PASSWORD }} build.keychain
        CODESIGN_IDENTITY=`security find-identity -v|head -n 1|awk '{print $2}'`
        for i in `ls build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/bin`; do
          /usr/bin/codesign --options=runtime --timestamp -v --sign ${CODESIGN_IDENTITY} --entitlements etc/entitlements -f build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/bin/$i
        done
        for i in `ls build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/lib`; do
          /usr/bin/codesign --options=runtime --timestamp -v --sign ${CODESIGN_IDENTITY} --entitlements etc/entitlements -f build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/lib/$i
        done

    - name: build the redis-stack-server zipfile (for homebrew)
      run: |
        cd redis-stack
        source .venv/bin/activate
        invoke package -o ${{env.osname}} -s ${{env.osnick}} -d ${{env.platform}} -a ${{env.arch}} -r ../redis/src -t zip -p redis-stack-server -k fetch
        for i in `ls *.zip`; do
          sha256sum $i |awk '{print $1}' > $i.sha256
        done
        mkdir s3dist
        cp *.zip *.sha256 s3dist

    - name: perist the zipfile
      uses: actions/upload-artifact@v2
      with:
        name: redis-stack-${{env.platform}}-${{env.arch}}.${{env.target}}
        path: |
          redis-stack/redis-stack-*.zip

    - name: create the zip for notarization
      run: |
        cd redis-stack/build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack
        zip -r notarized-${{env.platform}}-${{env.arch}}.zip bin lib

    - name: persist the notarized artifacts
      uses: actions/upload-artifact@v2
      with:
        name: codesigned-${{env.platform}}-${{env.arch}}.${{env.target}}
        path: |
          redis-stack/build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack/*.zip

    - name: notarize the custom zip
      run: |
        cd redis-stack/build/${{env.osname}}-${{env.osnick}}-${{env.arch}}.redis-stack-server/opt/redis-stack
        sh ../../../../notarize.sh notarized-${{env.platform}}-${{env.arch}}.zip com.redis.redis-stack-server ${{ secrets.MAC_NOTARIZE_USERNAME }} ${{ secrets.MAC_NOTARIZE_PASSWORD }}

  test-osx-intel:
    name: Mac (x86_64) Tests
    needs: ['build-package-osx']
    runs-on: macos-latest
    env:
      arch: x86_64
      osnick: catalina
      target: zip
      platform: catalina
      osname: macos
      pythonversion: 3.9

    steps:
    - name: install python
      uses: actions/setup-python@v2
      with:
        python-version: "${{ env.pythonversion }}"
    - name: install poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-in-project: true
        virtualenvs-create: true
        installer-parallel: true
    - name: checkout sources
      uses: actions/checkout@v2
    - name: install dependencies
      run: |
        brew install libomp openssl
        poetry install
    - name: gather artifacts
      uses: actions/download-artifact@v2
      with:
        path: codesigned
        name: codesigned-${{env.platform}}-${{env.arch}}.${{env.target}}
    - name: unzip the zipfile
      run: |
        ls -R
        mkdir redis-stack
        unzip codesigned.zip/notarized-${{env.platform}}-${{env.arch}}.${{env.target}} -d redis-stack/redis-stack-server
    - name: run osx tests
      run: |
        .venv/bin/pytest tests/smoketest/test_osx.py::TestOSXZip::test_basic_redis -s
    - name: get package version
      id: get_version
      run: |
        poetry install
        source .venv/bin/activate
        realversion=`invoke version -p redis-stack-server -d true`
        echo "::set-output name=VERSION::$realversion"

    - uses: s3-actions/s3cmd@v1.1
      with:
        provider: aws
        region: us-east-1
        access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: persist redis to s3
      run: |
        cd redis-stack
        s3cmd put -P notarized-${{env.platform}}-${{env.arch}}.${{env.target}} \
        s3://redismodules/redis-stack/snapshots/redis-stack-server-${{steps.get_version.outputs.VERSION}}-${{env.osname}}-${{env.osnick}}-${{env.arch}}.${{env.target}}
