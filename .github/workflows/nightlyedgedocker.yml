on:
  push:
  schedule:
    - cron: "0 1 * * *"

jobs:

  arm64-bionic:
    uses: ./.github/workflows/ARM_BUILD_AND_PACKAGE_REUSABLE.yml
    with:
      image_name: ubuntu:bionic
      platform: bionic
      osname: Linux
      osnick: ubuntu18.04
      arch: arm64
      target: deb
      build_deps: apt-get update && apt-get install -y build-essential libssl-dev python3 python3-pip
      packaging_deps: sudo apt-get install -y unzip dpkg-sig curl gnupg2
      redisversion: 7.0.2
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GPG_KEY: ${{ secrets.GPG_KEY }}
      GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}

  arm64-bionic-redisinsight-web:
    uses: ./.github/workflows/REDISINSIGHT_WEB_REUSABLE.yml
    with:
      platform: bionic
      osname: Linux
      osnick: ubuntu20.04
      arch: arm64
      target: deb
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GPG_KEY: ${{ secrets.GPG_KEY }}
      GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}

  arm64-docker:
    uses: ./.github/workflows/DOCKER_REUSABLE.yml
    needs: [arm64-bionic, arm64-bionic-redisinsight-web]
    with:
      pythonversion: 3.9
      arch: arm64
      platform: bionic
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_REDISFAB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_REDISFAB_TOKEN }}

  x86_64-focal-redisinsight-web:
    uses: ./.github/workflows/REDISINSIGHT_WEB_REUSABLE.yml
    with:
      platform: focal
      osname: Linux
      osnick: ubuntu20.04
      target: deb
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GPG_KEY: ${{ secrets.GPG_KEY }}
      GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}

  x86_64-focal:
    uses: ./.github/workflows/BUILD_AND_PACKAGE_REUSABLE.yml
    with:
      image_name: ubuntu:focal
      platform: focal
      osname: Linux
      osnick: ubuntu20.04
      arch: x86_64
      target: deb
      build_deps: apt-get update && apt-get install -y build-essential libssl-dev python3 python3-pip
      packaging_deps: sudo apt-get install -y unzip dpkg-sig curl gnupg2
      redisversion: 7.0.2
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GPG_KEY: ${{ secrets.GPG_KEY }}
      GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}

  x86_64-docker:
    uses: ./.github/workflows/DOCKER_REUSABLE.yml
    needs: [x86_64-focal, x86_64-focal-redisinsight-web]
    with:
      pythonversion: 3.9
      arch: x86_64
      platform: focal
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_REDISFAB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_REDISFAB_TOKEN }}
  docker-push:
    needs: [x86_64-docker, arm64-docker]
    name: Push ${{matrix.package}} manifest
    strategy:
      matrix:
        package: ['redis-stack-server', 'redis-stack']
    env:
      pythonversion: 3.9
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{inputs.pythonversion}}
      - name: install poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-in-project: true
          virtualenvs-create: true
          installer-parallel: true
      - name: get package version
        id: get_version
        run: |
          poetry install
          source .venv/bin/activate
          realversion=`invoke version -p ${{ matrix.package }} -d true`
          echo "::set-output name=VERSION::$realversion"

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_REDISFAB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_REDISFAB_TOKEN }}
      - name: create the manifest
        run: |
          docker manifest create redisfab/${{ matrix.package }}:${{steps.get_version.outputs.VERSION}} \
            redisfab/${{ matrix.package }}:${{steps.get_version.outputs.VERSION}}-x86_64 \
            redisfab/${{ matrix.package }}:${{steps.get_version.outputs.VERSION}}-arm64
      - name: push the manifest
        run: |
          docker manifest push redisfab/${{matrix.package}}:${{steps.get_version.outputs.VERSION}}
