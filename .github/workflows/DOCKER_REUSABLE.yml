name: Docker

on:
  workflow_call:
    inputs:
      pythonversion:
        required: false
        type: string
        default: "3.10"
      arch:
        required: false
        type: string
        default: x86_64
      platform:
        required: true
        type: string
    secrets:
      DOCKERHUB_TOKEN:
        required: true
      DOCKERHUB_USERNAME:
        required: true

jobs:


  dockers:
    name: ${{matrix.package}} docker
    strategy:
      matrix:
        package: ['redis-stack-server', 'redis-stack']

    runs-on: ubuntu-latest
    steps:

      - name: determine if in fork
        id: iamafork
        run: |
          amfork=`cat /home/runner/work/_temp/_github_workflow/event.json | jq '.pull_request.head.repo.fork'`
          echo "am I fork: ${amfork}"
          echo "::set-output name=IAMAFORK::$amfork"

      - uses: actions/checkout@v2
      - name: install python
        uses: actions/setup-python@v3
        with:
          python-version: "${{inputs.pythonversion}}"

      - uses: actions/cache@v2
        with:
          path: |
            /var/cache/apt
            /var/cache/yum
            ~/.cache/pip
            ~/.cache/pypoetry
            ~/.local/share/gem
          key: pypoetry-${{hashFiles('**/pyproject.toml', '.github/workflows/*.yml')}}-${{inputs.platform}}-${{inputs.arch}}-package

      - name: install poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-in-project: true
          virtualenvs-create: true
          installer-parallel: true

      - uses: actions/download-artifact@v2
        with:
          name: redis-stack-server-${{inputs.platform}}-${{inputs.arch}}.deb
          path: redis-stack
      - uses: actions/download-artifact@v2
        with:
          name: redisinsight-web-${{inputs.platform}}-${{inputs.arch}}.deb
          path: redis-stack
      - name: display structure
        run: ls -R

      - name: get package version
        id: get_version
        run: |
          poetry install
          source .venv/bin/activate
          realversion=`invoke version -p ${{ matrix.package }} -d true`
          echo "::set-output name=VERSION::$realversion"

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2

      - name: generate docker file
        run: |
          source .venv/bin/activate
          invoke dockergen -d ${{ matrix.package }}

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        if: steps.iamaform.outputs.IAMAFORK == 'false'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: build docker
        if: steps.iamaform.outputs.IAMAFORK == 'false'
        run: |
          source .venv/bin/activate
          invoke dockerbuild -a ${{inputs.arch}} -d envs/dockers/Dockerfile.${{ matrix.package }} -t redisfab/${{matrix.package}}:${{steps.get_version.outputs.VERSION}}-${{inputs.arch}} -r . -b

      - name: build docker
        if: steps.iamaform.outputs.IAMAFORK == 'false'
        run: |
          source .venv/bin/activate
          invoke dockerbuild -a ${{inputs.arch}} -d envs/dockers/Dockerfile.${{ matrix.package }} -t redisfab/${{matrix.package}}:${{steps.get_version.outputs.VERSION}}-${{inputs.arch}} -r .

      - name: test docker build
        if: steps.iamaform.outputs.IAMAFORK == 'false'
        run: |
          source .venv/bin/activate
          invoke test-ci-dockers -d ${{matrix.package}} -a ${{inputs.arch}} -v ${{steps.get_version.outputs.VERSION}}-${{inputs.arch}}
