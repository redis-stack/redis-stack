name: Snap

on:
  workflow_call:
    inputs:
      arch:
        required: false
        type: string
        default: x86_64
      osnick:
        required: true
        type: string
      platform:
        required: true
        type: string
      osname:
        required: false
        type: string
        default: Linux
      pythonversion:
        required: false
        type: string
        default: "3.10"
      rubyversion:
        required: false
        type: string
        default: 2.7.2
      pkg2appimageversioN:
        required: false
        type: string
        default: 1807
      fpmversion:
        required: false
        type: string
        default: 1.15.1
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  appimage:
    name: ${{matrix.package}} appimage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ['redis-stack-server']
    steps:

      - name: determine if in fork
        id: iamafork
        run: |
          amfork=`jq '.pull_request.head.repo.fork' $GITHUB_EVENT_PATH`
          echo "am I fork: ${amfork}"
          echo "IAMAFORK=$amfork" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
      - name: install python
        uses: actions/setup-python@v4
        with:
          python-version: "${{inputs.pythonversion}}"
      - uses: ruby/setup-ruby@v1

      - name: install libfuse
        run: |
          sudo apt update -qq
          sudo apt-get install -yqq libfuse-dev

      - uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt/archives/**.deb
            /var/cache/yum
            ~/.cache/pip
            ~/.cache/pypoetry
            ~/.local/share/gem
          key: pypoetry-${{hashFiles('**/pyproject.toml', '.github/workflows/*.yml')}}-${{inputs.platform}}-${{inputs.arch}}-package

      - name: install poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-in-project: true
          virtualenvs-create: true
          installer-parallel: true
      - name: install packaging tools
        run: |
          gem install fpm -v ${{inputs.fpmversion}}
          poetry install
      - name: fetch dependencies
        run: |
          wget -q https://github.com/AppImage/pkg2appimage/releases/download/continuous/pkg2appimage-${{inputs.pkg2appimageversion}}-${{inputs.arch}}.AppImage -O pkg2appimage.AppImage
          chmod a+x *.AppImage
      - name: fetch artifacts
        uses: actions/download-artifact@v3
        with:
          name: redis-stack-server-${{inputs.platform}}-${{inputs.arch}}.tar.gz
          path: .

      - name: get package version
        id: get_version
        run: |
          poetry install
          source .venv/bin/activate
          realversion=`invoke version -p redis-stack-server`
          echo "VERSION=$realversion" >> $GITHUB_OUTPUT
          echo ${realversion} > VERSION
          cat VERSION
      - name: build appimage
        run: |
          ./pkg2appimage.AppImage `pwd`/etc/redis-stack-server.appimage
          mv out/redis-stack-server-*.AppImage out/${{matrix.package}}-${{steps.get_version.outputs.VERSION}}-${{inputs.arch}}.AppImage
          for i in `ls out/*.AppImage`; do
            sha256sum $i | awk '{print $1}' > $i.sha256
          done

      - name: validate packages
        run: |
          source .venv/bin/activate
          mkdir redis-stack
          cp out/*.AppImage redis-stack/${{matrix.package}}.AppImage
          chmod a+x redis-stack/*.AppImage
          invoke test -m appimage -n physical -n arm

      - name: perist ${{env.target}} package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.package }}-${{steps.get_version.outputs.VERSION}}-${{inputs.arch}}.AppImage
          path: |
            out/${{ matrix.package }}*.AppImage

      - uses: s3-actions/s3cmd@v1.2.0
        if: steps.iamafork.outputs.IAMAFORK == 'false'
        with:
          provider: aws
          region: us-east-1
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: upload snapshots
        if: steps.iamafork.outputs.IAMAFORK == 'false'
        run: |
          s3cmd put -P out/* s3://redismodules/redis-stack/snapshots/
